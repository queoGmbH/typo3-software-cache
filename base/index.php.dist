<?php

require_once __DIR__ . '/vendor/autoload.php';

// set cache lifetime in seconds
$cacheLifetime = 3600;

// set additional custom headers HEADER_KEY => HEADER_VALUE
$additionalHeaders = [

];

$cacheDriver = new \Symfony\Component\Cache\Adapter\FilesystemAdapter();

$cacheIdGenerator = new \Queo\Typo3\SoftwareCache\Cache\CombinedIdGenerator([
    new \Queo\Typo3\SoftwareCache\Cache\UriIdGenerator
]);

$logger = new \Psr\Log\NullLogger;

$proxy   = new \Queo\Typo3\SoftwareCache\Proxy\Proxy($cacheDriver, $cacheIdGenerator, $logger);
$request = \Symfony\Component\HttpFoundation\Request::createFromGlobals();

// override default cache lifetime
$proxy->setCacheLifetime($cacheLifetime);

$proxy->addRequestRules([
    new \Queo\Typo3\SoftwareCache\Request\Rule\HttpMethodRule('GET')
]);
$proxy->handleRequest($request);

require $_SERVER['DOCUMENT_ROOT'] . '/typo3.php';

// add typo3-configured and additional headers
$proxy->addAdditionalHeaders(\Queo\Typo3\SoftwareCache\Service\Typo3ConfigurationService::getConfiguredHeaders());
$proxy->addAdditionalHeaders($additionalHeaders);

// create response
$response = new \Symfony\Component\HttpFoundation\Response($GLOBALS['TSFE']->content);

$proxy->addCacheRules([
    new \Queo\Typo3\SoftwareCache\Cache\Rule\HttpMethodRule('GET'),
    new \Queo\Typo3\SoftwareCache\Cache\Rule\DenyParamsRule(),
    new \Queo\Typo3\SoftwareCache\Cache\Rule\DenyStringInContentRule('Page is being generated.'),
]);
$proxy->cacheResponse($request, $response);